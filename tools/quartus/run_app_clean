#!/bin/bash
# -------------------------------------------------------------------------- #
#
# Copyright (C) 2010                                                        
# ASTRON (Netherlands Institute for Radio Astronomy) <http://www.astron.nl/>
# JIVE (Joint Institute for VLBI in Europe) <http://www.jive.nl/>           
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands                             
#                                                                           
# This program is free software: you can redistribute it and/or modify      
# it under the terms of the GNU General Public License as published by      
# the Free Software Foundation, either version 3 of the License, or         
# (at your option) any later version.                                       
#                                                                           
# This program is distributed in the hope that it will be useful,           
# but WITHOUT ANY WARRANTY; without even the implied warranty of            
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             
# GNU General Public License for more details.                              
#                                                                           
# You should have received a copy of the GNU General Public License         
# along with this program.  If not, see <http://www.gnu.org/licenses/>.     
#
# -------------------------------------------------------------------------- #
#

# Run this tool with at least the commandline arguments:
#   run_app_clean toolset design_name
# example:
#   run_app_clean unb2 unb2_minimal

if [ ! $1 ]; then
    echo "error: missing argument for toolset"
    exit 1
fi



# treat unset variables as an error - better fail loudly.
# implication is that "$1" and "$2" etc cannot be used in tests
#   as they may be quite unset, eg when the user did not enter 
#   them on the commandline.
#   now you get to parse the commandline and explicitly extract
#   the info you want or fill in with defaults
# bonus: extragratis failure if, for some reason, the ${UNB}
#   directory is not set.
set -u

# read generic functions/definitions
. ${RADIOHDL}/tools/quartus/generic.sh

toolset=$1
. ${RADIOHDL}/tools/quartus/set_quartus ${toolset}
shift # shift left commandline args: $2 becomes $1 ...  ($0 is untouched)


project=
app=
# parse cmdline
for arg ; do
    case ${arg} in
        app=*)
            # if app not already set, set it now
            if [ -n "${app}" ]; then
                unb_error $0 "Do not pass more than one app name!"
            fi
            app=`echo ${arg} | sed 's/^app=//'`
            ;;
        *=* )
            # it was an option. skip it - if we wanted to,
            # we could process them over here
            ;;
        * )
            # only accept one non-option argument, the project name
            if [ -n "${project}" ]; then
                unb_error $0 "You cannot pass more than one project names"
            fi
            project=${arg}
            ;;
    esac
done

PRJS="${RADIOHDL}"

PRJ=
for prj in ${PRJS}
    do
        if [ -d "${prj}/build/${toolset}/quartus/${project}" ]; then
            PRJ=${prj}
        fi  
    done  
if [ -z "${project}" -o -z "${PRJ}" ]; then
    unb_error $0 "Please enter a valid project name as parameter"
fi

if [ -z "${app}" ]; then
    app=
    unb_info $0 "No app name passed. Deleting BSP, UNB_LIB and compiled apps."
fi

# if the appdir does not exist. what to do?
#  technically it's a failure; you can't clean something that isn't there
#  logically one could reason: there is no need to clean something that
#            isn't there so the post-condition is the same in both
#            situations (exist + clean) vs (!exist + !clean).
# For now I (H. Verkouter) lean towards the logical clause since I think
# a non-fatal failure at this stage should not break other scripts
appdir="${PRJ}/build/${toolset}/quartus/${project}/software/${app}"

if [ -d "${appdir}" ]; then
    unb_exec $0 msg=no rm -Rf ${appdir}
fi
unb_info $0 "Done."
