----------------------------------------------------------------------------------------------------------
--
--  File Name:              <lib_name>_reg.vhd
--  Type:                   RTL
--  Template Rev:           1.0
--
--  Title:
--  Description:
--
--          Generated by Automatic Register Generation System (ARGS) from <lib>.peripheral.yaml
--
----------------------------------------------------------------------------------------------------------

LIBRARY IEEE, axi4_lib, common_lib, technology_lib;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE axi4_lib.axi4_lite_pkg.ALL;
USE common_lib.common_mem_pkg.ALL;
USE common_lib.common_pkg.ALL;
USE technology_lib.technology_pkg.ALL;
USE technology_lib.technology_select_pkg.ALL;
USE work.<lib_name>_reg_pkg.ALL;

-------------------------------------------------------------------------------
--                              ENTITY STATEMENT                             --
-------------------------------------------------------------------------------

entity <lib_name>_reg is
    GENERIC (g_technology : t_technology := c_tech_select_default);
    PORT (
        MM_CLK              : IN    STD_LOGIC;
        MM_RST              : IN    STD_LOGIC;
        <{user_clocks}>
        SLA_IN              : IN    t_axi4_lite_mosi;
        SLA_OUT             : OUT   t_axi4_lite_miso;
        <{slave_ports}>
        );
end <lib_name>_reg;

-------------------------------------------------------------------------------
--                           ARCHITECTURE STATEMENT                          --
-------------------------------------------------------------------------------

architecture rtl of <lib_name>_reg is

    ---------------------------------------------------------------------------
    --                CONSTANT, TYPE AND GENERIC DEFINITIONS                 --
    ---------------------------------------------------------------------------
    CONSTANT c_byte_w       : NATURAL := 8;
    CONSTANT c_addr_w       : NATURAL := <adr_w>;
    CONSTANT c_dat_w        : NATURAL := <dat_w>;

    <{c_mm_reg}>


    ---------------------------------------------------------------------------
    --                          SIGNAL DECLARATIONS                          --
    ---------------------------------------------------------------------------

    <{signal_declarations}>

    SIGNAL rd_dat               : STD_LOGIC_VECTOR(c_dat_w-1 DOWNTO 0);
    SIGNAL wr_dat               : STD_LOGIC_VECTOR(c_dat_w-1 DOWNTO 0);
    SIGNAL wr_val_sum           : STD_LOGIC;
    SIGNAL rd_val_sum           : STD_LOGIC;
    SIGNAL reg_wren             : STD_LOGIC;
    SIGNAL reg_rden             : STD_LOGIC;
    SIGNAL wr_adr               : STD_LOGIC_VECTOR(c_addr_w-1 DOWNTO 0);
    SIGNAL rd_adr               : STD_LOGIC_VECTOR(c_addr_w-1 DOWNTO 0);
    SIGNAL rd_busy_sum          : STD_LOGIC;
    SIGNAL wr_busy_sum          : STD_LOGIC;


    ---------------------------------------------------------------------------
    --                        COMPONENT DECLARATIONS                         --
    ---------------------------------------------------------------------------


begin

    ---------------------------------------------------------------------------
    --                        INSTANTIATE COMPONENTS                         --
    ---------------------------------------------------------------------------

    wr_val_sum <=
    <{wr_val}>
    rd_val_sum <=
    <{rd_val}>

    rd_dat <=
    <{rd_dat}>

    wr_busy_sum <=
    <{wr_busy}>
    rd_busy_sum <=
    <{rd_busy}>


    u_mem_to_axi4_lite : ENTITY axi4_lib.mem_to_axi4_lite
     GENERIC MAP (g_adr_w => c_addr_w,
                  g_dat_w => c_dat_w)
     PORT MAP (rst        => mm_rst,
               clk        => mm_clk,
               sla_in     => sla_in,
               sla_out    => sla_out,
               wren       => reg_wren,
               rden       => reg_rden,
               wr_adr     => wr_adr,
               wr_dat     => wr_dat,
               wr_val     => wr_val_sum,
               wr_busy    => wr_busy_sum,
               rd_adr     => rd_adr,
               rd_dat     => rd_dat,
               rd_val     => rd_val_sum,
               rd_busy    => rd_busy_sum);

    <{common_reg_inst}>

    ---------------------------------------------------------------------------
    --                  INPUT CONCURRENT SIGNAL ASSIGNMENTS                  --
    ---------------------------------------------------------------------------

    <{input_statements}>

    ---------------------------------------------------------------------------
    --                         CONCURRENT PROCESSES                          --
    ---------------------------------------------------------------------------

    ---------------------------------------------------------------------------
    --  Process:  <entity>_PROCESS
    --  Purpose:
    --  Inputs:
    --  Outputs:
    ---------------------------------------------------------------------------


    ---------------------------------------------------------------------------
    --                 OUTPUT CONCURRENT SIGNAL ASSIGNMENTS                  --
    ---------------------------------------------------------------------------

    <{output_statements}>

end rtl;

-------------------------------------------------------------------------------
--                          CONFIGURATION STATEMENT                          --
-------------------------------------------------------------------------------

--configuration <configuration> of <entity> is
--<{configuration_statements}>
--end <configuration>;

-------------------------------------------------------------------------------


